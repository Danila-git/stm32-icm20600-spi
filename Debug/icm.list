
icm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d64  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f3c  08000f3c  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f3c  08000f3c  00002040  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000f3c  08000f3c  00002040  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000f3c  08000f3c  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f3c  08000f3c  00001f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f40  08000f40  00001f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  08000f44  00002000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00002040  2**0
                  CONTENTS
 10 .bss          00000060  20000040  20000040  00002040  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  00002040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000061e  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000198  00000000  00000000  0000268e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00002828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004f  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ae13  00000000  00000000  000028e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000a6c  00000000  00000000  0001d6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009daf1  00000000  00000000  0001e166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bbc57  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000214  00000000  00000000  000bbc9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  000bbeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000040 	.word	0x20000040
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08000f24 	.word	0x08000f24

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000044 	.word	0x20000044
 8000214:	08000f24 	.word	0x08000f24

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <main>:
double accel_sensitivity[4] = {16384,8192,4096,2048};
double gyro_sensitivity[4] = {131,65.5,32.8,16.4};
volatile uint8_t who_am_i;


int main(void){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

RCC->APB2ENR |=	RCC_APB2ENR_SPI1EN;//включение тактирования SPI
 80009b8:	4b7d      	ldr	r3, [pc, #500]	@ (8000bb0 <main+0x1fc>)
 80009ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009bc:	4a7c      	ldr	r2, [pc, #496]	@ (8000bb0 <main+0x1fc>)
 80009be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009c2:	6613      	str	r3, [r2, #96]	@ 0x60
RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;//включение тактирования порта A
 80009c4:	4b7a      	ldr	r3, [pc, #488]	@ (8000bb0 <main+0x1fc>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c8:	4a79      	ldr	r2, [pc, #484]	@ (8000bb0 <main+0x1fc>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	64d3      	str	r3, [r2, #76]	@ 0x4c

//включение пинов 5-7 в альтернативные функции, а 4 в выходной сигнал
GPIOA->MODER &= ~(GPIO_MODER_MODE4_Msk | GPIO_MODER_MODE5_Msk | GPIO_MODER_MODE6_Msk | GPIO_MODER_MODE7_Msk);
 80009d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80009da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80009de:	6013      	str	r3, [r2, #0]
GPIOA->MODER |= (1 << GPIO_MODER_MODE4_Pos) | (2 << GPIO_MODER_MODE5_Pos) | (2 << GPIO_MODER_MODE6_Pos) | (2 << GPIO_MODER_MODE7_Pos);
 80009e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80009ea:	f443 4329 	orr.w	r3, r3, #43264	@ 0xa900
 80009ee:	6013      	str	r3, [r2, #0]

//альтернативные функции SPI для SCLK, MOSI, MISO
GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL5_Msk | GPIO_AFRL_AFSEL6_Msk | GPIO_AFRL_AFSEL7_Msk);
 80009f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80009f4:	6a1b      	ldr	r3, [r3, #32]
 80009f6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80009fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80009fe:	6213      	str	r3, [r2, #32]
GPIOA->AFR[0] |=  (5 << GPIO_AFRL_AFSEL5_Pos) | (5 << GPIO_AFRL_AFSEL6_Pos) | (5 << GPIO_AFRL_AFSEL7_Pos);
 8000a00:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a04:	6a1b      	ldr	r3, [r3, #32]
 8000a06:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a0a:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000a0e:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000a12:	6213      	str	r3, [r2, #32]

//настройка пина CS
GPIOA->BSRR = GPIO_BSRR_BS4;//высокий уровень - неактивный
 8000a14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a18:	2210      	movs	r2, #16
 8000a1a:	619a      	str	r2, [r3, #24]
GPIOA->OTYPER &= ~GPIO_OTYPER_OT4;
 8000a1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000a26:	f023 0310 	bic.w	r3, r3, #16
 8000a2a:	6053      	str	r3, [r2, #4]

SPI_Set();//функция настройки SPI
 8000a2c:	f000 f8d8 	bl	8000be0 <SPI_Set>
dummy_delay(50000);
 8000a30:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000a34:	f000 fa12 	bl	8000e5c <dummy_delay>
SPI1->CR1 |= SPI_CR1_SPE;//включаю SPI
 8000a38:	4b5e      	ldr	r3, [pc, #376]	@ (8000bb4 <main+0x200>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a5d      	ldr	r2, [pc, #372]	@ (8000bb4 <main+0x200>)
 8000a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a42:	6013      	str	r3, [r2, #0]
dummy_delay(50000);
 8000a44:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000a48:	f000 fa08 	bl	8000e5c <dummy_delay>
w_data_SPI(0x70,0b01000000);//отключаю I2C
 8000a4c:	2140      	movs	r1, #64	@ 0x40
 8000a4e:	2070      	movs	r0, #112	@ 0x70
 8000a50:	f000 f90c 	bl	8000c6c <w_data_SPI>
dummy_delay(50000);
 8000a54:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000a58:	f000 fa00 	bl	8000e5c <dummy_delay>
w_data_SPI(0x6B,0b01);//отключаю sleep mode
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	206b      	movs	r0, #107	@ 0x6b
 8000a60:	f000 f904 	bl	8000c6c <w_data_SPI>
dummy_delay(50000);
 8000a64:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000a68:	f000 f9f8 	bl	8000e5c <dummy_delay>
who_am_i = r_data_SPI(0x75);//проверяю наличие связи с ICM
 8000a6c:	2075      	movs	r0, #117	@ 0x75
 8000a6e:	f000 f949 	bl	8000d04 <r_data_SPI>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b50      	ldr	r3, [pc, #320]	@ (8000bb8 <main+0x204>)
 8000a78:	701a      	strb	r2, [r3, #0]
w_data_SPI(0x6C,0b0);//включаю все оси акселерометра и гироскопа
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	206c      	movs	r0, #108	@ 0x6c
 8000a7e:	f000 f8f5 	bl	8000c6c <w_data_SPI>
w_data_SPI(0x1B,GYRO_SCALE << 3); //устанавливаю заданную чувствительность гироскопа
 8000a82:	2118      	movs	r1, #24
 8000a84:	201b      	movs	r0, #27
 8000a86:	f000 f8f1 	bl	8000c6c <w_data_SPI>
w_data_SPI(0x1C,ACCEL_SCALE << 3); //устанавливаю заданную чувствительность акселерометра
 8000a8a:	2118      	movs	r1, #24
 8000a8c:	201c      	movs	r0, #28
 8000a8e:	f000 f8ed 	bl	8000c6c <w_data_SPI>

while(1)
{
	uninterrupt_r_data_SPI(0x3B);
 8000a92:	203b      	movs	r0, #59	@ 0x3b
 8000a94:	f000 f986 	bl	8000da4 <uninterrupt_r_data_SPI>

         //вычисляю из исходных значений по формуле значения ускорения по осям и угловые скорости
		    accel_x_data = (double)(int16_t)((storage[0] << 8) | storage[1])/accel_sensitivity[ACCEL_SCALE];
 8000a98:	4b48      	ldr	r3, [pc, #288]	@ (8000bbc <main+0x208>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	021b      	lsls	r3, r3, #8
 8000aa0:	b21a      	sxth	r2, r3
 8000aa2:	4b46      	ldr	r3, [pc, #280]	@ (8000bbc <main+0x208>)
 8000aa4:	785b      	ldrb	r3, [r3, #1]
 8000aa6:	b21b      	sxth	r3, r3
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	b21b      	sxth	r3, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fd05 	bl	80004bc <__aeabi_i2d>
 8000ab2:	4b43      	ldr	r3, [pc, #268]	@ (8000bc0 <main+0x20c>)
 8000ab4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000ab8:	f7ff fe94 	bl	80007e4 <__aeabi_ddiv>
 8000abc:	4602      	mov	r2, r0
 8000abe:	460b      	mov	r3, r1
 8000ac0:	4940      	ldr	r1, [pc, #256]	@ (8000bc4 <main+0x210>)
 8000ac2:	e9c1 2300 	strd	r2, r3, [r1]
		    accel_y_data = (double)(int16_t)((storage[2] << 8) | storage[3])/accel_sensitivity[ACCEL_SCALE];
 8000ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bbc <main+0x208>)
 8000ac8:	789b      	ldrb	r3, [r3, #2]
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	021b      	lsls	r3, r3, #8
 8000ace:	b21a      	sxth	r2, r3
 8000ad0:	4b3a      	ldr	r3, [pc, #232]	@ (8000bbc <main+0x208>)
 8000ad2:	78db      	ldrb	r3, [r3, #3]
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fcee 	bl	80004bc <__aeabi_i2d>
 8000ae0:	4b37      	ldr	r3, [pc, #220]	@ (8000bc0 <main+0x20c>)
 8000ae2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000ae6:	f7ff fe7d 	bl	80007e4 <__aeabi_ddiv>
 8000aea:	4602      	mov	r2, r0
 8000aec:	460b      	mov	r3, r1
 8000aee:	4936      	ldr	r1, [pc, #216]	@ (8000bc8 <main+0x214>)
 8000af0:	e9c1 2300 	strd	r2, r3, [r1]
		    accel_z_data = (double)(int16_t)((storage[4] << 8) | storage[5])/accel_sensitivity[ACCEL_SCALE];
 8000af4:	4b31      	ldr	r3, [pc, #196]	@ (8000bbc <main+0x208>)
 8000af6:	791b      	ldrb	r3, [r3, #4]
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	b21a      	sxth	r2, r3
 8000afe:	4b2f      	ldr	r3, [pc, #188]	@ (8000bbc <main+0x208>)
 8000b00:	795b      	ldrb	r3, [r3, #5]
 8000b02:	b21b      	sxth	r3, r3
 8000b04:	4313      	orrs	r3, r2
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fcd7 	bl	80004bc <__aeabi_i2d>
 8000b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc0 <main+0x20c>)
 8000b10:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000b14:	f7ff fe66 	bl	80007e4 <__aeabi_ddiv>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	492b      	ldr	r1, [pc, #172]	@ (8000bcc <main+0x218>)
 8000b1e:	e9c1 2300 	strd	r2, r3, [r1]
			gyro_x_data = (double)(int16_t)((storage[8] << 8) | storage[9])/gyro_sensitivity[GYRO_SCALE];
 8000b22:	4b26      	ldr	r3, [pc, #152]	@ (8000bbc <main+0x208>)
 8000b24:	7a1b      	ldrb	r3, [r3, #8]
 8000b26:	b21b      	sxth	r3, r3
 8000b28:	021b      	lsls	r3, r3, #8
 8000b2a:	b21a      	sxth	r2, r3
 8000b2c:	4b23      	ldr	r3, [pc, #140]	@ (8000bbc <main+0x208>)
 8000b2e:	7a5b      	ldrb	r3, [r3, #9]
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	4313      	orrs	r3, r2
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fcc0 	bl	80004bc <__aeabi_i2d>
 8000b3c:	4b24      	ldr	r3, [pc, #144]	@ (8000bd0 <main+0x21c>)
 8000b3e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000b42:	f7ff fe4f 	bl	80007e4 <__aeabi_ddiv>
 8000b46:	4602      	mov	r2, r0
 8000b48:	460b      	mov	r3, r1
 8000b4a:	4922      	ldr	r1, [pc, #136]	@ (8000bd4 <main+0x220>)
 8000b4c:	e9c1 2300 	strd	r2, r3, [r1]
			gyro_y_data = (double)(int16_t)((storage[10] << 8) | storage[11])/gyro_sensitivity[GYRO_SCALE];
 8000b50:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <main+0x208>)
 8000b52:	7a9b      	ldrb	r3, [r3, #10]
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <main+0x208>)
 8000b5c:	7adb      	ldrb	r3, [r3, #11]
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	4313      	orrs	r3, r2
 8000b62:	b21b      	sxth	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fca9 	bl	80004bc <__aeabi_i2d>
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <main+0x21c>)
 8000b6c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000b70:	f7ff fe38 	bl	80007e4 <__aeabi_ddiv>
 8000b74:	4602      	mov	r2, r0
 8000b76:	460b      	mov	r3, r1
 8000b78:	4917      	ldr	r1, [pc, #92]	@ (8000bd8 <main+0x224>)
 8000b7a:	e9c1 2300 	strd	r2, r3, [r1]
			gyro_z_data = (double)(int16_t)((storage[12] << 8) | storage[13])/gyro_sensitivity[GYRO_SCALE];
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <main+0x208>)
 8000b80:	7b1b      	ldrb	r3, [r3, #12]
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <main+0x208>)
 8000b8a:	7b5b      	ldrb	r3, [r3, #13]
 8000b8c:	b21b      	sxth	r3, r3
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fc92 	bl	80004bc <__aeabi_i2d>
 8000b98:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <main+0x21c>)
 8000b9a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000b9e:	f7ff fe21 	bl	80007e4 <__aeabi_ddiv>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	490d      	ldr	r1, [pc, #52]	@ (8000bdc <main+0x228>)
 8000ba8:	e9c1 2300 	strd	r2, r3, [r1]
{
 8000bac:	bf00      	nop
 8000bae:	e770      	b.n	8000a92 <main+0xde>
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40013000 	.word	0x40013000
 8000bb8:	2000009e 	.word	0x2000009e
 8000bbc:	20000090 	.word	0x20000090
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	20000060 	.word	0x20000060
 8000bc8:	20000068 	.word	0x20000068
 8000bcc:	20000070 	.word	0x20000070
 8000bd0:	20000020 	.word	0x20000020
 8000bd4:	20000078 	.word	0x20000078
 8000bd8:	20000080 	.word	0x20000080
 8000bdc:	20000088 	.word	0x20000088

08000be0 <SPI_Set>:
}
}

void SPI_Set(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
	//настройка SPI
	SPI1->CR1 |= 0b0 << SPI_CR1_BIDIMODE_Pos;//2 линии передачи
 8000be4:	4b20      	ldr	r3, [pc, #128]	@ (8000c68 <SPI_Set+0x88>)
 8000be6:	4a20      	ldr	r2, [pc, #128]	@ (8000c68 <SPI_Set+0x88>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= 0b0 << SPI_CR1_RXONLY_Pos;
 8000bec:	4b1e      	ldr	r3, [pc, #120]	@ (8000c68 <SPI_Set+0x88>)
 8000bee:	4a1e      	ldr	r2, [pc, #120]	@ (8000c68 <SPI_Set+0x88>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= 0b1 << SPI_CR1_SSM_Pos;//программное управление CS
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <SPI_Set+0x88>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c68 <SPI_Set+0x88>)
 8000bfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bfe:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= 0b1 << SPI_CR1_SSI_Pos;
 8000c00:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <SPI_Set+0x88>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a18      	ldr	r2, [pc, #96]	@ (8000c68 <SPI_Set+0x88>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= 0b0 << SPI_CR1_LSBFIRST_Pos; //сначала передается старший бит
 8000c0c:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <SPI_Set+0x88>)
 8000c0e:	4a16      	ldr	r2, [pc, #88]	@ (8000c68 <SPI_Set+0x88>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= 0b001 << SPI_CR1_BR_Pos;//частота 4МГц(максимальная у ICM 10 MГц)
 8000c14:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <SPI_Set+0x88>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a13      	ldr	r2, [pc, #76]	@ (8000c68 <SPI_Set+0x88>)
 8000c1a:	f043 0308 	orr.w	r3, r3, #8
 8000c1e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= 0b1 << SPI_CR1_MSTR_Pos;//включаю конфигурации мастера
 8000c20:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <SPI_Set+0x88>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a10      	ldr	r2, [pc, #64]	@ (8000c68 <SPI_Set+0x88>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= 0b1 << SPI_CR1_CPOL_Pos;//полярность 1
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <SPI_Set+0x88>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <SPI_Set+0x88>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= 0b1 << SPI_CR1_CPHA_Pos;//фаза 1
 8000c38:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <SPI_Set+0x88>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <SPI_Set+0x88>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6013      	str	r3, [r2, #0]
	SPI1->CR2 |= 0b0111 << SPI_CR2_DS_Pos;//длина слова 8 бит
 8000c44:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <SPI_Set+0x88>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	4a07      	ldr	r2, [pc, #28]	@ (8000c68 <SPI_Set+0x88>)
 8000c4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000c4e:	6053      	str	r3, [r2, #4]
    SPI1->CR2 |= 0b1 << SPI_CR2_FRXTH_Pos;//флаг заполнения RXFIFO при 8 битах
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <SPI_Set+0x88>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <SPI_Set+0x88>)
 8000c56:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c5a:	6053      	str	r3, [r2, #4]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40013000 	.word	0x40013000

08000c6c <w_data_SPI>:


void w_data_SPI(uint8_t address, uint8_t data) {
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	460a      	mov	r2, r1
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	71bb      	strb	r3, [r7, #6]
    volatile uint8_t trash;

	GPIOA->BSRR = GPIO_BSRR_BR4;
 8000c7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c80:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000c84:	619a      	str	r2, [r3, #24]
	while (!(SPI1->SR & SPI_SR_TXE));
 8000c86:	bf00      	nop
 8000c88:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <w_data_SPI+0x90>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d0f9      	beq.n	8000c88 <w_data_SPI+0x1c>

	*((volatile uint8_t*) &SPI1->DR) = address;
 8000c94:	4a1a      	ldr	r2, [pc, #104]	@ (8000d00 <w_data_SPI+0x94>)
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	7013      	strb	r3, [r2, #0]

	while (!(SPI1->SR & SPI_SR_RXNE));
 8000c9a:	bf00      	nop
 8000c9c:	4b17      	ldr	r3, [pc, #92]	@ (8000cfc <w_data_SPI+0x90>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f9      	beq.n	8000c9c <w_data_SPI+0x30>

	trash = SPI1->DR;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <w_data_SPI+0x90>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	73fb      	strb	r3, [r7, #15]

	while (!(SPI1->SR & SPI_SR_TXE));
 8000cb0:	bf00      	nop
 8000cb2:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <w_data_SPI+0x90>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f9      	beq.n	8000cb2 <w_data_SPI+0x46>

	*((volatile uint8_t*) &SPI1->DR) = data;
 8000cbe:	4a10      	ldr	r2, [pc, #64]	@ (8000d00 <w_data_SPI+0x94>)
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	7013      	strb	r3, [r2, #0]

	while (!(SPI1->SR & SPI_SR_RXNE));
 8000cc4:	bf00      	nop
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cfc <w_data_SPI+0x90>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d0f9      	beq.n	8000cc6 <w_data_SPI+0x5a>

	trash = SPI1->DR;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <w_data_SPI+0x90>)
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	73fb      	strb	r3, [r7, #15]

    while (SPI1->SR & SPI_SR_BSY);
 8000cda:	bf00      	nop
 8000cdc:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <w_data_SPI+0x90>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f9      	bne.n	8000cdc <w_data_SPI+0x70>

    GPIOA->BSRR = GPIO_BSRR_BS4;
 8000ce8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cec:	2210      	movs	r2, #16
 8000cee:	619a      	str	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	40013000 	.word	0x40013000
 8000d00:	4001300c 	.word	0x4001300c

08000d04 <r_data_SPI>:

uint8_t  r_data_SPI(uint8_t address)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t trash;
	uint8_t r_data = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	73fb      	strb	r3, [r7, #15]
	address = address | 0x80;
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d18:	71fb      	strb	r3, [r7, #7]

	    GPIOA->BSRR = GPIO_BSRR_BR4;
 8000d1a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d1e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000d22:	619a      	str	r2, [r3, #24]
	    while (!(SPI1->SR & SPI_SR_TXE));
 8000d24:	bf00      	nop
 8000d26:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <r_data_SPI+0x98>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f9      	beq.n	8000d26 <r_data_SPI+0x22>

	    *((volatile uint8_t *) &SPI1->DR) = address;
 8000d32:	4a1b      	ldr	r2, [pc, #108]	@ (8000da0 <r_data_SPI+0x9c>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	7013      	strb	r3, [r2, #0]

	    while (!(SPI1->SR & SPI_SR_RXNE));
 8000d38:	bf00      	nop
 8000d3a:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <r_data_SPI+0x98>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0f9      	beq.n	8000d3a <r_data_SPI+0x36>

	    trash = SPI1->DR;
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <r_data_SPI+0x98>)
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	73bb      	strb	r3, [r7, #14]

	    while (!(SPI1->SR & SPI_SR_TXE));
 8000d4e:	bf00      	nop
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <r_data_SPI+0x98>)
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0f9      	beq.n	8000d50 <r_data_SPI+0x4c>

	    *((volatile uint8_t *) &SPI1->DR) = 0x55;
 8000d5c:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <r_data_SPI+0x9c>)
 8000d5e:	2255      	movs	r2, #85	@ 0x55
 8000d60:	701a      	strb	r2, [r3, #0]

	    while (!(SPI1->SR & SPI_SR_RXNE));
 8000d62:	bf00      	nop
 8000d64:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <r_data_SPI+0x98>)
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0f9      	beq.n	8000d64 <r_data_SPI+0x60>

	    r_data = SPI1->DR;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <r_data_SPI+0x98>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	73fb      	strb	r3, [r7, #15]

	    while (SPI1->SR & SPI_SR_BSY);
 8000d76:	bf00      	nop
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <r_data_SPI+0x98>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f9      	bne.n	8000d78 <r_data_SPI+0x74>
	    GPIOA->BSRR = GPIO_BSRR_BS4;
 8000d84:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d88:	2210      	movs	r2, #16
 8000d8a:	619a      	str	r2, [r3, #24]
	    return r_data;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40013000 	.word	0x40013000
 8000da0:	4001300c 	.word	0x4001300c

08000da4 <uninterrupt_r_data_SPI>:

void  uninterrupt_r_data_SPI(uint8_t address)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t trash;
	address = address | 0x80;
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000db4:	71fb      	strb	r3, [r7, #7]

	    GPIOA->BSRR = GPIO_BSRR_BR4;
 8000db6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000dba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000dbe:	619a      	str	r2, [r3, #24]
	    while (!(SPI1->SR & SPI_SR_TXE));
 8000dc0:	bf00      	nop
 8000dc2:	4b23      	ldr	r3, [pc, #140]	@ (8000e50 <uninterrupt_r_data_SPI+0xac>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0f9      	beq.n	8000dc2 <uninterrupt_r_data_SPI+0x1e>

	    *((volatile uint8_t *) &SPI1->DR) = address;
 8000dce:	4a21      	ldr	r2, [pc, #132]	@ (8000e54 <uninterrupt_r_data_SPI+0xb0>)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	7013      	strb	r3, [r2, #0]

	    while (!(SPI1->SR & SPI_SR_RXNE));
 8000dd4:	bf00      	nop
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e50 <uninterrupt_r_data_SPI+0xac>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f9      	beq.n	8000dd6 <uninterrupt_r_data_SPI+0x32>

	    trash = SPI1->DR;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <uninterrupt_r_data_SPI+0xac>)
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	72fb      	strb	r3, [r7, #11]

	    for(int i = 0; i <= 13; i += 1)
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	e01b      	b.n	8000e28 <uninterrupt_r_data_SPI+0x84>
	    {
	    while (!(SPI1->SR & SPI_SR_TXE));
 8000df0:	bf00      	nop
 8000df2:	4b17      	ldr	r3, [pc, #92]	@ (8000e50 <uninterrupt_r_data_SPI+0xac>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f9      	beq.n	8000df2 <uninterrupt_r_data_SPI+0x4e>

	    *((volatile uint8_t *) &SPI1->DR) = 0x55;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <uninterrupt_r_data_SPI+0xb0>)
 8000e00:	2255      	movs	r2, #85	@ 0x55
 8000e02:	701a      	strb	r2, [r3, #0]

	    while (!(SPI1->SR & SPI_SR_RXNE));
 8000e04:	bf00      	nop
 8000e06:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <uninterrupt_r_data_SPI+0xac>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f9      	beq.n	8000e06 <uninterrupt_r_data_SPI+0x62>

	    storage[i] = SPI1->DR;
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <uninterrupt_r_data_SPI+0xac>)
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	b2d9      	uxtb	r1, r3
 8000e18:	4a0f      	ldr	r2, [pc, #60]	@ (8000e58 <uninterrupt_r_data_SPI+0xb4>)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	460a      	mov	r2, r1
 8000e20:	701a      	strb	r2, [r3, #0]
	    for(int i = 0; i <= 13; i += 1)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	3301      	adds	r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2b0d      	cmp	r3, #13
 8000e2c:	dde0      	ble.n	8000df0 <uninterrupt_r_data_SPI+0x4c>
	    }
	    while (SPI1->SR & SPI_SR_BSY);
 8000e2e:	bf00      	nop
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <uninterrupt_r_data_SPI+0xac>)
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1f9      	bne.n	8000e30 <uninterrupt_r_data_SPI+0x8c>
	    GPIOA->BSRR = GPIO_BSRR_BS4;
 8000e3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e40:	2210      	movs	r2, #16
 8000e42:	619a      	str	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	40013000 	.word	0x40013000
 8000e54:	4001300c 	.word	0x4001300c
 8000e58:	20000090 	.word	0x20000090

08000e5c <dummy_delay>:

void dummy_delay(uint32_t duration) {
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < duration; i+=1);
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	e002      	b.n	8000e70 <dummy_delay+0x14>
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d3f8      	bcc.n	8000e6a <dummy_delay+0xe>
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e88:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e8a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e8c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e90:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e92:	490d      	ldr	r1, [pc, #52]	@ (8000ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <LoopForever+0xe>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed4 <LoopForever+0x16>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eb6:	f000 f811 	bl	8000edc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eba:	f7ff fd7b 	bl	80009b4 <main>

08000ebe <LoopForever>:

LoopForever:
  b LoopForever
 8000ebe:	e7fe      	b.n	8000ebe <LoopForever>
  ldr   r0, =_estack
 8000ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000ecc:	08000f44 	.word	0x08000f44
  ldr r2, =_sbss
 8000ed0:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000ed4:	200000a0 	.word	0x200000a0

08000ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC1_2_IRQHandler>
	...

08000edc <__libc_init_array>:
 8000edc:	b570      	push	{r4, r5, r6, lr}
 8000ede:	4d0d      	ldr	r5, [pc, #52]	@ (8000f14 <__libc_init_array+0x38>)
 8000ee0:	4c0d      	ldr	r4, [pc, #52]	@ (8000f18 <__libc_init_array+0x3c>)
 8000ee2:	1b64      	subs	r4, r4, r5
 8000ee4:	10a4      	asrs	r4, r4, #2
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	42a6      	cmp	r6, r4
 8000eea:	d109      	bne.n	8000f00 <__libc_init_array+0x24>
 8000eec:	4d0b      	ldr	r5, [pc, #44]	@ (8000f1c <__libc_init_array+0x40>)
 8000eee:	4c0c      	ldr	r4, [pc, #48]	@ (8000f20 <__libc_init_array+0x44>)
 8000ef0:	f000 f818 	bl	8000f24 <_init>
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	10a4      	asrs	r4, r4, #2
 8000ef8:	2600      	movs	r6, #0
 8000efa:	42a6      	cmp	r6, r4
 8000efc:	d105      	bne.n	8000f0a <__libc_init_array+0x2e>
 8000efe:	bd70      	pop	{r4, r5, r6, pc}
 8000f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f04:	4798      	blx	r3
 8000f06:	3601      	adds	r6, #1
 8000f08:	e7ee      	b.n	8000ee8 <__libc_init_array+0xc>
 8000f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f0e:	4798      	blx	r3
 8000f10:	3601      	adds	r6, #1
 8000f12:	e7f2      	b.n	8000efa <__libc_init_array+0x1e>
 8000f14:	08000f3c 	.word	0x08000f3c
 8000f18:	08000f3c 	.word	0x08000f3c
 8000f1c:	08000f3c 	.word	0x08000f3c
 8000f20:	08000f40 	.word	0x08000f40

08000f24 <_init>:
 8000f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f26:	bf00      	nop
 8000f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2a:	bc08      	pop	{r3}
 8000f2c:	469e      	mov	lr, r3
 8000f2e:	4770      	bx	lr

08000f30 <_fini>:
 8000f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f32:	bf00      	nop
 8000f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f36:	bc08      	pop	{r3}
 8000f38:	469e      	mov	lr, r3
 8000f3a:	4770      	bx	lr
