
icm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000530  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000708  08000708  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000708  08000708  00002020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000708  08000708  00002020  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000708  08000708  00002020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000708  08000708  00001708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800070c  0800070c  0000170c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08000710  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00002020  2**0
                  CONTENTS
 10 .bss          00000068  20000020  20000020  00002020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000088  20000088  00002020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY
 13 .debug_info   000008e6  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001c4  00000000  00000000  00002936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00002b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005d  00000000  00000000  00002b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ae19  00000000  00000000  00002be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000a0d  00000000  00000000  0001d9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009dbfa  00000000  00000000  0001e40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bc005  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000017c  00000000  00000000  000bc048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  000bc1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080006f0 	.word	0x080006f0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	080006f0 	.word	0x080006f0

08000218 <main>:
uint8_t storage[MAX_ARRAY_SIZE];
float accel_sensitivity[4] = {16384, 8192, 4096, 2048};
float gyro_sensitivity[4] = {131, 65.5, 32.8, 16.4};
uint8_t who_am_i;

int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
    SCB->CPACR |= 0x3 << 20;
 800021c:	4b7b      	ldr	r3, [pc, #492]	@ (800040c <main+0x1f4>)
 800021e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000222:	4a7a      	ldr	r2, [pc, #488]	@ (800040c <main+0x1f4>)
 8000224:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000228:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN; // enable SPI clock
 800022c:	4b78      	ldr	r3, [pc, #480]	@ (8000410 <main+0x1f8>)
 800022e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000230:	4a77      	ldr	r2, [pc, #476]	@ (8000410 <main+0x1f8>)
 8000232:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000236:	6613      	str	r3, [r2, #96]	@ 0x60
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; // enable port A clock
 8000238:	4b75      	ldr	r3, [pc, #468]	@ (8000410 <main+0x1f8>)
 800023a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023c:	4a74      	ldr	r2, [pc, #464]	@ (8000410 <main+0x1f8>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // configure pins 5-7 as alternate function, pin 4 as output
    GPIOA->MODER &= ~(GPIO_MODER_MODE4_Msk | GPIO_MODER_MODE5_Msk | GPIO_MODER_MODE6_Msk | GPIO_MODER_MODE7_Msk);
 8000244:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800024e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000252:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << GPIO_MODER_MODE4_Pos) | (2 << GPIO_MODER_MODE5_Pos) | (2 << GPIO_MODER_MODE6_Pos) | (2 << GPIO_MODER_MODE7_Pos);
 8000254:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800025e:	f443 4329 	orr.w	r3, r3, #43264	@ 0xa900
 8000262:	6013      	str	r3, [r2, #0]

    // set alternate function SPI for SCLK, MOSI, MISO
    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL5_Msk | GPIO_AFRL_AFSEL6_Msk | GPIO_AFRL_AFSEL7_Msk);
 8000264:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000268:	6a1b      	ldr	r3, [r3, #32]
 800026a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800026e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000272:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (5 << GPIO_AFRL_AFSEL5_Pos) | (5 << GPIO_AFRL_AFSEL6_Pos) | (5 << GPIO_AFRL_AFSEL7_Pos);
 8000274:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000278:	6a1b      	ldr	r3, [r3, #32]
 800027a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800027e:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000282:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000286:	6213      	str	r3, [r2, #32]

    // configure CS pin
    GPIOA->BSRR = GPIO_BSRR_BS4; // Set high - inactive
 8000288:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800028c:	2210      	movs	r2, #16
 800028e:	619a      	str	r2, [r3, #24]

    spi_set(); // SPI configuration function
 8000290:	f000 f8d6 	bl	8000440 <spi_set>
    dummy_delay(50000);
 8000294:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000298:	f000 f9c6 	bl	8000628 <dummy_delay>
    SPI1->CR1 |= SPI_CR1_SPE; // enable SPI
 800029c:	4b5d      	ldr	r3, [pc, #372]	@ (8000414 <main+0x1fc>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a5c      	ldr	r2, [pc, #368]	@ (8000414 <main+0x1fc>)
 80002a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002a6:	6013      	str	r3, [r2, #0]
    dummy_delay(50000);
 80002a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80002ac:	f000 f9bc 	bl	8000628 <dummy_delay>
    add_data_spi(0x70, 0b01000000); // disable I2C
 80002b0:	2140      	movs	r1, #64	@ 0x40
 80002b2:	2070      	movs	r0, #112	@ 0x70
 80002b4:	f000 f8fe 	bl	80004b4 <add_data_spi>
    dummy_delay(50000);
 80002b8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80002bc:	f000 f9b4 	bl	8000628 <dummy_delay>
    add_data_spi(0x6B, 0b01); // disable sleep mode
 80002c0:	2101      	movs	r1, #1
 80002c2:	206b      	movs	r0, #107	@ 0x6b
 80002c4:	f000 f8f6 	bl	80004b4 <add_data_spi>
    dummy_delay(50000);
 80002c8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80002cc:	f000 f9ac 	bl	8000628 <dummy_delay>
    who_am_i = r_data_spi(0x75); // Check communication with ICM
 80002d0:	2075      	movs	r0, #117	@ 0x75
 80002d2:	f000 f91f 	bl	8000514 <r_data_spi>
 80002d6:	4603      	mov	r3, r0
 80002d8:	461a      	mov	r2, r3
 80002da:	4b4f      	ldr	r3, [pc, #316]	@ (8000418 <main+0x200>)
 80002dc:	701a      	strb	r2, [r3, #0]
    add_data_spi(0x6C, 0b0); // Enable all accelerometer and gyroscope axes
 80002de:	2100      	movs	r1, #0
 80002e0:	206c      	movs	r0, #108	@ 0x6c
 80002e2:	f000 f8e7 	bl	80004b4 <add_data_spi>
    add_data_spi(0x1B, GYRO_SCALE << 3); // Set gyroscope sensitivity
 80002e6:	2118      	movs	r1, #24
 80002e8:	201b      	movs	r0, #27
 80002ea:	f000 f8e3 	bl	80004b4 <add_data_spi>
    add_data_spi(0x1C, ACCEL_SCALE << 3); // Set accelerometer sensitivity
 80002ee:	2118      	movs	r1, #24
 80002f0:	201c      	movs	r0, #28
 80002f2:	f000 f8df 	bl	80004b4 <add_data_spi>

    while (1) {
        uninterrupt_r_data_spi(0x3B, 14); // Function for continuous reading of 14 registers
 80002f6:	210e      	movs	r1, #14
 80002f8:	203b      	movs	r0, #59	@ 0x3b
 80002fa:	f000 f937 	bl	800056c <uninterrupt_r_data_spi>

        // Calculate acceleration values and angular rates from raw data
        accel_x_data = (float)(int16_t)((storage[0] << 8) | storage[1]) / accel_sensitivity[ACCEL_SCALE];
 80002fe:	4b47      	ldr	r3, [pc, #284]	@ (800041c <main+0x204>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	b21b      	sxth	r3, r3
 8000304:	021b      	lsls	r3, r3, #8
 8000306:	b21a      	sxth	r2, r3
 8000308:	4b44      	ldr	r3, [pc, #272]	@ (800041c <main+0x204>)
 800030a:	785b      	ldrb	r3, [r3, #1]
 800030c:	b21b      	sxth	r3, r3
 800030e:	4313      	orrs	r3, r2
 8000310:	b21b      	sxth	r3, r3
 8000312:	ee07 3a90 	vmov	s15, r3
 8000316:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800031a:	4b41      	ldr	r3, [pc, #260]	@ (8000420 <main+0x208>)
 800031c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000324:	4b3f      	ldr	r3, [pc, #252]	@ (8000424 <main+0x20c>)
 8000326:	edc3 7a00 	vstr	s15, [r3]
        accel_y_data = (float)(int16_t)((storage[2] << 8) | storage[3]) / accel_sensitivity[ACCEL_SCALE];
 800032a:	4b3c      	ldr	r3, [pc, #240]	@ (800041c <main+0x204>)
 800032c:	789b      	ldrb	r3, [r3, #2]
 800032e:	b21b      	sxth	r3, r3
 8000330:	021b      	lsls	r3, r3, #8
 8000332:	b21a      	sxth	r2, r3
 8000334:	4b39      	ldr	r3, [pc, #228]	@ (800041c <main+0x204>)
 8000336:	78db      	ldrb	r3, [r3, #3]
 8000338:	b21b      	sxth	r3, r3
 800033a:	4313      	orrs	r3, r2
 800033c:	b21b      	sxth	r3, r3
 800033e:	ee07 3a90 	vmov	s15, r3
 8000342:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000346:	4b36      	ldr	r3, [pc, #216]	@ (8000420 <main+0x208>)
 8000348:	ed93 7a03 	vldr	s14, [r3, #12]
 800034c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000350:	4b35      	ldr	r3, [pc, #212]	@ (8000428 <main+0x210>)
 8000352:	edc3 7a00 	vstr	s15, [r3]
        accel_z_data = (float)(int16_t)((storage[4] << 8) | storage[5]) / accel_sensitivity[ACCEL_SCALE];
 8000356:	4b31      	ldr	r3, [pc, #196]	@ (800041c <main+0x204>)
 8000358:	791b      	ldrb	r3, [r3, #4]
 800035a:	b21b      	sxth	r3, r3
 800035c:	021b      	lsls	r3, r3, #8
 800035e:	b21a      	sxth	r2, r3
 8000360:	4b2e      	ldr	r3, [pc, #184]	@ (800041c <main+0x204>)
 8000362:	795b      	ldrb	r3, [r3, #5]
 8000364:	b21b      	sxth	r3, r3
 8000366:	4313      	orrs	r3, r2
 8000368:	b21b      	sxth	r3, r3
 800036a:	ee07 3a90 	vmov	s15, r3
 800036e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000372:	4b2b      	ldr	r3, [pc, #172]	@ (8000420 <main+0x208>)
 8000374:	ed93 7a03 	vldr	s14, [r3, #12]
 8000378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800037c:	4b2b      	ldr	r3, [pc, #172]	@ (800042c <main+0x214>)
 800037e:	edc3 7a00 	vstr	s15, [r3]
        gyro_x_data = (float)(int16_t)((storage[8] << 8) | storage[9]) / gyro_sensitivity[GYRO_SCALE];
 8000382:	4b26      	ldr	r3, [pc, #152]	@ (800041c <main+0x204>)
 8000384:	7a1b      	ldrb	r3, [r3, #8]
 8000386:	b21b      	sxth	r3, r3
 8000388:	021b      	lsls	r3, r3, #8
 800038a:	b21a      	sxth	r2, r3
 800038c:	4b23      	ldr	r3, [pc, #140]	@ (800041c <main+0x204>)
 800038e:	7a5b      	ldrb	r3, [r3, #9]
 8000390:	b21b      	sxth	r3, r3
 8000392:	4313      	orrs	r3, r2
 8000394:	b21b      	sxth	r3, r3
 8000396:	ee07 3a90 	vmov	s15, r3
 800039a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800039e:	4b24      	ldr	r3, [pc, #144]	@ (8000430 <main+0x218>)
 80003a0:	ed93 7a03 	vldr	s14, [r3, #12]
 80003a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80003a8:	4b22      	ldr	r3, [pc, #136]	@ (8000434 <main+0x21c>)
 80003aa:	edc3 7a00 	vstr	s15, [r3]
        gyro_y_data = (float)(int16_t)((storage[10] << 8) | storage[11]) / gyro_sensitivity[GYRO_SCALE];
 80003ae:	4b1b      	ldr	r3, [pc, #108]	@ (800041c <main+0x204>)
 80003b0:	7a9b      	ldrb	r3, [r3, #10]
 80003b2:	b21b      	sxth	r3, r3
 80003b4:	021b      	lsls	r3, r3, #8
 80003b6:	b21a      	sxth	r2, r3
 80003b8:	4b18      	ldr	r3, [pc, #96]	@ (800041c <main+0x204>)
 80003ba:	7adb      	ldrb	r3, [r3, #11]
 80003bc:	b21b      	sxth	r3, r3
 80003be:	4313      	orrs	r3, r2
 80003c0:	b21b      	sxth	r3, r3
 80003c2:	ee07 3a90 	vmov	s15, r3
 80003c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80003ca:	4b19      	ldr	r3, [pc, #100]	@ (8000430 <main+0x218>)
 80003cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80003d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80003d4:	4b18      	ldr	r3, [pc, #96]	@ (8000438 <main+0x220>)
 80003d6:	edc3 7a00 	vstr	s15, [r3]
        gyro_z_data = (float)(int16_t)((storage[12] << 8) | storage[13]) / gyro_sensitivity[GYRO_SCALE];
 80003da:	4b10      	ldr	r3, [pc, #64]	@ (800041c <main+0x204>)
 80003dc:	7b1b      	ldrb	r3, [r3, #12]
 80003de:	b21b      	sxth	r3, r3
 80003e0:	021b      	lsls	r3, r3, #8
 80003e2:	b21a      	sxth	r2, r3
 80003e4:	4b0d      	ldr	r3, [pc, #52]	@ (800041c <main+0x204>)
 80003e6:	7b5b      	ldrb	r3, [r3, #13]
 80003e8:	b21b      	sxth	r3, r3
 80003ea:	4313      	orrs	r3, r2
 80003ec:	b21b      	sxth	r3, r3
 80003ee:	ee07 3a90 	vmov	s15, r3
 80003f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80003f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000430 <main+0x218>)
 80003f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80003fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000400:	4b0e      	ldr	r3, [pc, #56]	@ (800043c <main+0x224>)
 8000402:	edc3 7a00 	vstr	s15, [r3]
        uninterrupt_r_data_spi(0x3B, 14); // Function for continuous reading of 14 registers
 8000406:	bf00      	nop
 8000408:	e775      	b.n	80002f6 <main+0xde>
 800040a:	bf00      	nop
 800040c:	e000ed00 	.word	0xe000ed00
 8000410:	40021000 	.word	0x40021000
 8000414:	40013000 	.word	0x40013000
 8000418:	20000086 	.word	0x20000086
 800041c:	20000054 	.word	0x20000054
 8000420:	20000000 	.word	0x20000000
 8000424:	2000003c 	.word	0x2000003c
 8000428:	20000040 	.word	0x20000040
 800042c:	20000044 	.word	0x20000044
 8000430:	20000010 	.word	0x20000010
 8000434:	20000048 	.word	0x20000048
 8000438:	2000004c 	.word	0x2000004c
 800043c:	20000050 	.word	0x20000050

08000440 <spi_set>:
    }
}

void spi_set(void) {
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
    SPI1->CR1 |= 0b1 << SPI_CR1_SSM_Pos; // software CS management
 8000444:	4b1a      	ldr	r3, [pc, #104]	@ (80004b0 <spi_set+0x70>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a19      	ldr	r2, [pc, #100]	@ (80004b0 <spi_set+0x70>)
 800044a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800044e:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= 0b1 << SPI_CR1_SSI_Pos;
 8000450:	4b17      	ldr	r3, [pc, #92]	@ (80004b0 <spi_set+0x70>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a16      	ldr	r2, [pc, #88]	@ (80004b0 <spi_set+0x70>)
 8000456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800045a:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= 0b001 << SPI_CR1_BR_Pos; // frequency 4MHz (ICM max 10MHz)
 800045c:	4b14      	ldr	r3, [pc, #80]	@ (80004b0 <spi_set+0x70>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a13      	ldr	r2, [pc, #76]	@ (80004b0 <spi_set+0x70>)
 8000462:	f043 0308 	orr.w	r3, r3, #8
 8000466:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= 0b1 << SPI_CR1_MSTR_Pos; // master configuration
 8000468:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <spi_set+0x70>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a10      	ldr	r2, [pc, #64]	@ (80004b0 <spi_set+0x70>)
 800046e:	f043 0304 	orr.w	r3, r3, #4
 8000472:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= 0b1 << SPI_CR1_CPOL_Pos; // CPOL = 1
 8000474:	4b0e      	ldr	r3, [pc, #56]	@ (80004b0 <spi_set+0x70>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a0d      	ldr	r2, [pc, #52]	@ (80004b0 <spi_set+0x70>)
 800047a:	f043 0302 	orr.w	r3, r3, #2
 800047e:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= 0b1 << SPI_CR1_CPHA_Pos; // CPHA = 1
 8000480:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <spi_set+0x70>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a0a      	ldr	r2, [pc, #40]	@ (80004b0 <spi_set+0x70>)
 8000486:	f043 0301 	orr.w	r3, r3, #1
 800048a:	6013      	str	r3, [r2, #0]
    SPI1->CR2 |= 0b0111 << SPI_CR2_DS_Pos; // 8 bit data length
 800048c:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <spi_set+0x70>)
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	4a07      	ldr	r2, [pc, #28]	@ (80004b0 <spi_set+0x70>)
 8000492:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000496:	6053      	str	r3, [r2, #4]
    SPI1->CR2 |= 0b1 << SPI_CR2_FRXTH_Pos; // RXFIFO threshold flag for 8 bits
 8000498:	4b05      	ldr	r3, [pc, #20]	@ (80004b0 <spi_set+0x70>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4a04      	ldr	r2, [pc, #16]	@ (80004b0 <spi_set+0x70>)
 800049e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004a2:	6053      	str	r3, [r2, #4]
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40013000 	.word	0x40013000

080004b4 <add_data_spi>:
    while (SPI1->SR & SPI_SR_BSY);

    GPIOA->BSRR = GPIO_BSRR_BS4;
}

void add_data_spi(uint8_t address, uint8_t data) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	460a      	mov	r2, r1
 80004be:	71fb      	strb	r3, [r7, #7]
 80004c0:	4613      	mov	r3, r2
 80004c2:	71bb      	strb	r3, [r7, #6]
    uint8_t data_for_send = r_data_spi(address) | data;
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 f824 	bl	8000514 <r_data_spi>
 80004cc:	4603      	mov	r3, r0
 80004ce:	461a      	mov	r2, r3
 80004d0:	79bb      	ldrb	r3, [r7, #6]
 80004d2:	4313      	orrs	r3, r2
 80004d4:	73fb      	strb	r3, [r7, #15]

    GPIOA->BSRR = GPIO_BSRR_BR4;
 80004d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80004de:	619a      	str	r2, [r3, #24]

    send_recieve_byte_of_data(address);
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f87c 	bl	80005e0 <send_recieve_byte_of_data>
    send_recieve_byte_of_data(data_for_send);
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 f878 	bl	80005e0 <send_recieve_byte_of_data>

    while (SPI1->SR & SPI_SR_BSY);
 80004f0:	bf00      	nop
 80004f2:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <add_data_spi+0x5c>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d1f9      	bne.n	80004f2 <add_data_spi+0x3e>

    GPIOA->BSRR = GPIO_BSRR_BS4;
 80004fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000502:	2210      	movs	r2, #16
 8000504:	619a      	str	r2, [r3, #24]
}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40013000 	.word	0x40013000

08000514 <r_data_spi>:

uint8_t r_data_spi(uint8_t address) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
    uint8_t r_data = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	73fb      	strb	r3, [r7, #15]
    address = address | 0x80;
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000528:	71fb      	strb	r3, [r7, #7]

    GPIOA->BSRR = GPIO_BSRR_BR4;
 800052a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800052e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000532:	619a      	str	r2, [r3, #24]

    send_recieve_byte_of_data(address);
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f852 	bl	80005e0 <send_recieve_byte_of_data>
    r_data = send_recieve_byte_of_data(0x55);
 800053c:	2055      	movs	r0, #85	@ 0x55
 800053e:	f000 f84f 	bl	80005e0 <send_recieve_byte_of_data>
 8000542:	4603      	mov	r3, r0
 8000544:	73fb      	strb	r3, [r7, #15]

    while (SPI1->SR & SPI_SR_BSY);
 8000546:	bf00      	nop
 8000548:	4b07      	ldr	r3, [pc, #28]	@ (8000568 <r_data_spi+0x54>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1f9      	bne.n	8000548 <r_data_spi+0x34>
    GPIOA->BSRR = GPIO_BSRR_BS4;
 8000554:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000558:	2210      	movs	r2, #16
 800055a:	619a      	str	r2, [r3, #24]

    return r_data;
 800055c:	7bfb      	ldrb	r3, [r7, #15]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40013000 	.word	0x40013000

0800056c <uninterrupt_r_data_spi>:

void uninterrupt_r_data_spi(uint8_t address, uint32_t num_of_addresses) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	71fb      	strb	r3, [r7, #7]
    address = address | 0x80;
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800057e:	71fb      	strb	r3, [r7, #7]

    GPIOA->BSRR = GPIO_BSRR_BR4;
 8000580:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000584:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000588:	619a      	str	r2, [r3, #24]

    send_recieve_byte_of_data(address);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 f827 	bl	80005e0 <send_recieve_byte_of_data>

    for (int i = 0; i < num_of_addresses; i += 1) {
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	e00c      	b.n	80005b2 <uninterrupt_r_data_spi+0x46>
        storage[i] = send_recieve_byte_of_data(0x55);
 8000598:	2055      	movs	r0, #85	@ 0x55
 800059a:	f000 f821 	bl	80005e0 <send_recieve_byte_of_data>
 800059e:	4603      	mov	r3, r0
 80005a0:	4619      	mov	r1, r3
 80005a2:	4a0d      	ldr	r2, [pc, #52]	@ (80005d8 <uninterrupt_r_data_spi+0x6c>)
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4413      	add	r3, r2
 80005a8:	460a      	mov	r2, r1
 80005aa:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < num_of_addresses; i += 1) {
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	3301      	adds	r3, #1
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d8ee      	bhi.n	8000598 <uninterrupt_r_data_spi+0x2c>
    }

    while (SPI1->SR & SPI_SR_BSY);
 80005ba:	bf00      	nop
 80005bc:	4b07      	ldr	r3, [pc, #28]	@ (80005dc <uninterrupt_r_data_spi+0x70>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f9      	bne.n	80005bc <uninterrupt_r_data_spi+0x50>
    GPIOA->BSRR = GPIO_BSRR_BS4;
 80005c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005cc:	2210      	movs	r2, #16
 80005ce:	619a      	str	r2, [r3, #24]
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000054 	.word	0x20000054
 80005dc:	40013000 	.word	0x40013000

080005e0 <send_recieve_byte_of_data>:

    while (SPI1->SR & SPI_SR_BSY);
    GPIOA->BSRR = GPIO_BSRR_BS4;
}

uint8_t send_recieve_byte_of_data(uint8_t send_data) {
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
    uint8_t recieve_data;

    while (!(SPI1->SR & SPI_SR_TXE));
 80005ea:	bf00      	nop
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <send_recieve_byte_of_data+0x40>)
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	f003 0302 	and.w	r3, r3, #2
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0f9      	beq.n	80005ec <send_recieve_byte_of_data+0xc>

    *((volatile uint8_t *) &SPI1->DR) = send_data;
 80005f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <send_recieve_byte_of_data+0x44>)
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	7013      	strb	r3, [r2, #0]

    while (!(SPI1->SR & SPI_SR_RXNE));
 80005fe:	bf00      	nop
 8000600:	4b07      	ldr	r3, [pc, #28]	@ (8000620 <send_recieve_byte_of_data+0x40>)
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0f9      	beq.n	8000600 <send_recieve_byte_of_data+0x20>

    recieve_data = SPI1->DR;
 800060c:	4b04      	ldr	r3, [pc, #16]	@ (8000620 <send_recieve_byte_of_data+0x40>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	73fb      	strb	r3, [r7, #15]

    return recieve_data;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40013000 	.word	0x40013000
 8000624:	4001300c 	.word	0x4001300c

08000628 <dummy_delay>:

void dummy_delay(uint32_t duration) {
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < duration; i += 1);
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	e002      	b.n	800063c <dummy_delay+0x14>
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	3301      	adds	r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	d3f8      	bcc.n	8000636 <dummy_delay+0xe>
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
	...

08000654 <Reset_Handler>:
 8000654:	480d      	ldr	r0, [pc, #52]	@ (800068c <LoopForever+0x2>)
 8000656:	4685      	mov	sp, r0
 8000658:	f3af 8000 	nop.w
 800065c:	480c      	ldr	r0, [pc, #48]	@ (8000690 <LoopForever+0x6>)
 800065e:	490d      	ldr	r1, [pc, #52]	@ (8000694 <LoopForever+0xa>)
 8000660:	4a0d      	ldr	r2, [pc, #52]	@ (8000698 <LoopForever+0xe>)
 8000662:	2300      	movs	r3, #0
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:
 8000666:	58d4      	ldr	r4, [r2, r3]
 8000668:	50c4      	str	r4, [r0, r3]
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:
 800066c:	18c4      	adds	r4, r0, r3
 800066e:	428c      	cmp	r4, r1
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>
 8000672:	4a0a      	ldr	r2, [pc, #40]	@ (800069c <LoopForever+0x12>)
 8000674:	4c0a      	ldr	r4, [pc, #40]	@ (80006a0 <LoopForever+0x16>)
 8000676:	2300      	movs	r3, #0
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:
 800067e:	42a2      	cmp	r2, r4
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>
 8000682:	f000 f811 	bl	80006a8 <__libc_init_array>
 8000686:	f7ff fdc7 	bl	8000218 <main>

0800068a <LoopForever>:
 800068a:	e7fe      	b.n	800068a <LoopForever>
 800068c:	20020000 	.word	0x20020000
 8000690:	20000000 	.word	0x20000000
 8000694:	20000020 	.word	0x20000020
 8000698:	08000710 	.word	0x08000710
 800069c:	20000020 	.word	0x20000020
 80006a0:	20000088 	.word	0x20000088

080006a4 <ADC1_2_IRQHandler>:
 80006a4:	e7fe      	b.n	80006a4 <ADC1_2_IRQHandler>
	...

080006a8 <__libc_init_array>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	4d0d      	ldr	r5, [pc, #52]	@ (80006e0 <__libc_init_array+0x38>)
 80006ac:	4c0d      	ldr	r4, [pc, #52]	@ (80006e4 <__libc_init_array+0x3c>)
 80006ae:	1b64      	subs	r4, r4, r5
 80006b0:	10a4      	asrs	r4, r4, #2
 80006b2:	2600      	movs	r6, #0
 80006b4:	42a6      	cmp	r6, r4
 80006b6:	d109      	bne.n	80006cc <__libc_init_array+0x24>
 80006b8:	4d0b      	ldr	r5, [pc, #44]	@ (80006e8 <__libc_init_array+0x40>)
 80006ba:	4c0c      	ldr	r4, [pc, #48]	@ (80006ec <__libc_init_array+0x44>)
 80006bc:	f000 f818 	bl	80006f0 <_init>
 80006c0:	1b64      	subs	r4, r4, r5
 80006c2:	10a4      	asrs	r4, r4, #2
 80006c4:	2600      	movs	r6, #0
 80006c6:	42a6      	cmp	r6, r4
 80006c8:	d105      	bne.n	80006d6 <__libc_init_array+0x2e>
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d0:	4798      	blx	r3
 80006d2:	3601      	adds	r6, #1
 80006d4:	e7ee      	b.n	80006b4 <__libc_init_array+0xc>
 80006d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006da:	4798      	blx	r3
 80006dc:	3601      	adds	r6, #1
 80006de:	e7f2      	b.n	80006c6 <__libc_init_array+0x1e>
 80006e0:	08000708 	.word	0x08000708
 80006e4:	08000708 	.word	0x08000708
 80006e8:	08000708 	.word	0x08000708
 80006ec:	0800070c 	.word	0x0800070c

080006f0 <_init>:
 80006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f2:	bf00      	nop
 80006f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006f6:	bc08      	pop	{r3}
 80006f8:	469e      	mov	lr, r3
 80006fa:	4770      	bx	lr

080006fc <_fini>:
 80006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fe:	bf00      	nop
 8000700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000702:	bc08      	pop	{r3}
 8000704:	469e      	mov	lr, r3
 8000706:	4770      	bx	lr
